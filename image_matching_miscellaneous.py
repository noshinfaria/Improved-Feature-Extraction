# -*- coding: utf-8 -*-
"""Image matching miscellaneous.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UTPg9SuumnI9rKzWLmmMenr63mAr6wDp
"""

from google.colab import drive
drive.mount('/content/drive')

"""# **Create Augmented Images**"""

import cv2
import os
import albumentations as A
import matplotlib.pyplot as plt

# augmentation_pipeline = A.Compose([
#     # 1. Geometric Transformations
#     A.HorizontalFlip(p=0.5),                   # Random horizontal flip
#     A.VerticalFlip(p=0.3),                     # Random vertical flip
#     A.Rotate(limit=30, p=0.5),                 # Random rotation within Â±30 degrees
#     A.RandomScale(scale_limit=0.2, p=0.6),     # More aggressive scaling
#     A.ShiftScaleRotate(shift_limit=0.1,        # Combined shifting, scaling, and rotation
#                        scale_limit=0.15,
#                        rotate_limit=20, p=0.5),

#     # 2. Blur, Noise, and Distortion
#     A.GaussianBlur(blur_limit=(7, 13), p=0.4),    # Stronger Gaussian blur
#     A.MotionBlur(blur_limit=(5, 15), p=0.4),      # Simulate motion blur
#     A.ISONoise(color_shift=(0.2, 0.6),            # Add realistic camera noise
#                intensity=(0.2, 0.6), p=0.4),
#     A.GridDistortion(num_steps=7, distort_limit=0.5, p=0.4),  # More intense grid distortion
#     A.ElasticTransform(alpha=2, sigma=100, alpha_affine=70, p=0.4),  # Strong elastic deformation

#     # 3. Brightness, Contrast, and Color
#     A.RandomBrightnessContrast(brightness_limit=0.4,
#                                contrast_limit=0.4, p=0.6),  # Aggressive brightness/contrast
#     A.HueSaturationValue(hue_shift_limit=20,
#                          sat_shift_limit=30,
#                          val_shift_limit=20, p=0.5),       # Strong hue/saturation adjustments

#     # 4. Cropping and Padding
#     # A.RandomCrop(height=200, width=200, p=0.5),           # Random crop (adjust size as needed)
#     # A.PadIfNeeded(min_height=224, min_width=224, p=1.0),  # Ensure consistent output dimensions

#     # 5. Other Transformations
#     A.CLAHE(clip_limit=4.0, tile_grid_size=(8, 8), p=0.4),  # Enhance contrast using CLAHE
#     A.Perspective(scale=(0.05, 0.1), p=0.4),               # Strong perspective distortions
#     A.ChannelShuffle(p=0.3),                               # Shuffle color channels
# ])

import albumentations as A

augmentation_pipeline = A.Compose([
    # 1. Geometric Transformations (More Aggressive)
    A.HorizontalFlip(p=0.7),                      # More frequent horizontal flip
    A.VerticalFlip(p=0.5),                        # More frequent vertical flip
    A.Rotate(limit=90, p=0.7),                    # Increased rotation range
    A.RandomScale(scale_limit=0.4, p=0.7),        # More aggressive scaling
    A.ShiftScaleRotate(shift_limit=0.2,           # More aggressive shifting, scaling, and rotation
                       scale_limit=0.3,
                       rotate_limit=45, p=0.7),
    A.Perspective(scale=(0.1, 0.3), p=0.6),       # Strong perspective distortion

    # 2. Blur, Noise, and Distortion
    A.GaussianBlur(blur_limit=(9, 21), p=0.5),    # Extreme Gaussian blur
    A.MotionBlur(blur_limit=(9, 25), p=0.5),     # Simulate heavy motion blur
    A.ISONoise(color_shift=(0.3, 0.7),            # More extreme noise
               intensity=(0.3, 0.7), p=0.5),
    A.GaussNoise(var_limit=(20.0, 100.0), p=0.6), # Strong Gaussian noise
    # A.GridDistortion(num_steps=10, distort_limit=0.8, p=0.6),  # Severe grid distortion
    A.ElasticTransform(alpha=3, sigma=150, alpha_affine=90, p=0.6),  # Severe elastic deformation

    # 3. Brightness, Contrast, and Color Alteration
    A.RandomBrightnessContrast(brightness_limit=0.6,
                               contrast_limit=0.6, p=0.7),  # Extreme brightness/contrast
    A.HueSaturationValue(hue_shift_limit=30,
                         sat_shift_limit=50,
                         val_shift_limit=30, p=0.7),       # Strong hue/saturation shifts
    # A.Solarize(threshold=128, p=0.5),                      # Extreme lighting conditions
    A.Equalize(p=0.5),                                     # Histogram equalization

    # 4. Occlusions and Cutting
    # A.CoarseDropout(max_holes=10, max_height=50, max_width=50, p=0.6),  # Large random occlusions
    # augmentations.transforms.Cutout(num_holes=10, max_h_size=50, max_w_size=50, p=0.6),       # Cutout patches
    # A.GridDropout(ratio=0.5, p=0.5),                                    # Grid-style occlusions

    # 5. Cropping and Padding
    A.RandomCrop(height=180, width=180, p=0.5),  # Random crop
    # A.PadIfNeeded(min_height=224, min_width=224, p=1.0),  # Ensure output dimensions

    # 6. Other Transformations
    A.CLAHE(clip_limit=5.0, tile_grid_size=(8, 8), p=0.5),  # Strong CLAHE
    A.ChannelShuffle(p=0.5),                               # More frequent channel shuffling
])



# Define the base directory
base_dir = '/content/drive/MyDrive/Faria/fingerprint/dataset/all data'

# Create a directory to save augmented images, if needed
output_dir = os.path.join(base_dir, '2x_extreme_augmented(geo transform)')
os.makedirs(output_dir, exist_ok=True)

for filename in os.listdir(base_dir):
    if filename.endswith('.png'):  # Process only PNG images
        # Construct the full path to the image file
        file_path = os.path.join(base_dir, filename)
        original_image = cv2.imread(file_path, cv2.IMREAD_GRAYSCALE)
        original_image = cv2.cvtColor(original_image, cv2.COLOR_GRAY2RGB) # Convert to 3-channel RGB

        # Perform augmentation
        augmented_result = augmentation_pipeline(image=original_image)
        augmented_image = augmented_result['image']

        # Modify the filename to append '_img2'
        name, ext = os.path.splitext(filename)
        new_filename = f"{name}_img2{ext}"

        # Save the augmented image with the new filename in the output directory
        output_path = os.path.join(output_dir, new_filename)
        cv2.imwrite(output_path, augmented_image)

        # Optional: Display the augmented image
        fig, ax = plt.subplots(1, 1, figsize=(5, 3))
        ax.imshow(augmented_image, cmap='gray')
        ax.axis('off')
        plt.tight_layout()
        plt.show()

print(f"Augmented images saved to: {output_dir}")

"""# **Create CSV file**"""

import os
import random
import pandas as pd

# Directory containing fingerprint images
image_dir = "/content/drive/MyDrive/Faria/fingerprint/dataset/2x extreme pair data"

# List all fingerprint images
images = os.listdir(image_dir)

# Generate positive and negative pairs
pairs = []
count0 = 0
count1 = 0
for i in range(len(images)):
    for j in range(i, len(images)):
        # Positive pair (same person)
        if images[i][:4] == images[j][:4] and count1 < 750:  # Assuming filename convention includes ID
            pairs.append((images[i], images[j], 1))
            count1 +=1
        # Negative pair (different person)
        elif count0 < 750:
            pairs.append((images[i], images[j], 0))
            count0+=1

# Shuffle and save pairs
random.shuffle(pairs)
pairs_df = pd.DataFrame(pairs, columns=["image_a", "image_b", "label"])
pairs_df.to_csv("/content/drive/MyDrive/Faria/fingerprint/dataset/2x_extreme_fingerprint_pairs(geo_trans).csv", index=False)

"""# **Compare Original and CLAHE-Enhanced Image**"""

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load a sample fingerprint image in grayscale
image_path = "/content/drive/MyDrive/Faria/fingerprint/dataset/all data with img1/0147_img1.png"
img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

# Apply CLAHE
clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
clahe_img = clahe.apply(img)

# Plot original and CLAHE-enhanced image side by side
plt.figure(figsize=(10, 5))

# Original image
plt.subplot(2, 2, 1)
plt.imshow(img, cmap='gray')
plt.title("Original Image")
plt.axis("off")

# CLAHE-enhanced image
plt.subplot(2, 2, 2)
plt.imshow(clahe_img, cmap='gray')
plt.title("CLAHE-Enhanced Image")
plt.axis("off")

# Original image histogram
plt.subplot(2, 2, 3)
plt.hist(img.ravel(), bins=256, range=(0, 256), color='blue', alpha=0.7)
plt.title("Original Histogram")
plt.xlabel("Pixel Intensity")
plt.ylabel("Frequency")

# CLAHE-enhanced image histogram
plt.subplot(2, 2, 4)
plt.hist(clahe_img.ravel(), bins=256, range=(0, 256), color='green', alpha=0.7)
plt.title("CLAHE Histogram")
plt.xlabel("Pixel Intensity")
plt.ylabel("Frequency")

plt.tight_layout()
plt.show()

"""# **Compare Original, Normal Histogram Equalization, and CLAHE**"""

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load a sample fingerprint image in grayscale
image_path = "/content/drive/MyDrive/Faria/fingerprint/dataset/all data with img1/0147_img1.png"
img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

# Apply Normal Histogram Equalization
normal_eq_img = cv2.equalizeHist(img)

# Apply CLAHE
clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
clahe_img = clahe.apply(img)

# Plot original, normal equalized, and CLAHE-enhanced images
plt.figure(figsize=(15, 10))

# Original image
plt.subplot(3, 3, 1)
plt.imshow(img, cmap='gray')
plt.title("Original Image")
plt.axis("off")

# Normal histogram equalized image
plt.subplot(3, 3, 2)
plt.imshow(normal_eq_img, cmap='gray')
plt.title("Normal Histogram Equalized")
plt.axis("off")

# CLAHE-enhanced image
plt.subplot(3, 3, 3)
plt.imshow(clahe_img, cmap='gray')
plt.title("CLAHE-Enhanced Image")
plt.axis("off")

# Original image histogram
plt.subplot(3, 3, 4)
plt.hist(img.ravel(), bins=256, range=(0, 256), color='blue', alpha=0.7)
plt.title("Original Histogram")
plt.xlabel("Pixel Intensity")
plt.ylabel("Frequency")

# Normal histogram equalized histogram
plt.subplot(3, 3, 5)
plt.hist(normal_eq_img.ravel(), bins=256, range=(0, 256), color='orange', alpha=0.7)
plt.title("Normal Histogram")
plt.xlabel("Pixel Intensity")
plt.ylabel("Frequency")

# CLAHE-enhanced image histogram
plt.subplot(3, 3, 6)
plt.hist(clahe_img.ravel(), bins=256, range=(0, 256), color='green', alpha=0.7)
plt.title("CLAHE Histogram")
plt.xlabel("Pixel Intensity")
plt.ylabel("Frequency")

# Show the plots
plt.tight_layout()
plt.show()

"""# **Contrast Adjustment Visualization**"""

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load a sample fingerprint image in grayscale
image_path = "/content/drive/MyDrive/Faria/fingerprint/dataset/all data with img1/0144_img1.png"
img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

# Apply contrast and brightness adjustment
alpha = 1.5  # Contrast control
beta = 0     # Brightness control
contrast_img = cv2.convertScaleAbs(img, alpha=alpha, beta=beta)

# Plot the original image and the contrast-adjusted image
plt.figure(figsize=(15, 10))

# Original image
plt.subplot(2, 2, 1)
plt.imshow(img, cmap='gray')
plt.title("Original Image")
plt.axis("off")

# Contrast-adjusted image
plt.subplot(2, 2, 2)
plt.imshow(contrast_img, cmap='gray')
plt.title(f"Contrast Adjusted (Î±={alpha}, Î²={beta})")
plt.axis("off")

# Original image histogram
plt.subplot(2, 2, 3)
plt.hist(img.ravel(), bins=256, range=(0, 256), color='blue', alpha=0.7)
plt.title("Original Histogram")
plt.xlabel("Pixel Intensity")
plt.ylabel("Frequency")

# Contrast-adjusted image histogram
plt.subplot(2, 2, 4)
plt.hist(contrast_img.ravel(), bins=256, range=(0, 256), color='red', alpha=0.7)
plt.title(f"Contrast Adjusted Histogram (Î±={alpha}, Î²={beta})")
plt.xlabel("Pixel Intensity")
plt.ylabel("Frequency")

# Show the plots
plt.tight_layout()
plt.show()

"""# **Combined Graph for Contrast Adjustment and CLAHE**"""

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load a sample fingerprint image in grayscale
image_path = "/content/drive/MyDrive/Faria/fingerprint/dataset/all data with img1/0147_img1.png"  # Replace with the path to your image
img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

# Apply contrast adjustment (cv2.convertScaleAbs)
alpha = 1.5  # Contrast control
beta = 0     # Brightness control
contrast_img = cv2.convertScaleAbs(img, alpha=alpha, beta=beta)

# Apply CLAHE
clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
clahe_img = clahe.apply(img)

# Plot the original image, contrast-adjusted image, CLAHE image, and their histograms
plt.figure(figsize=(20, 12))

# Original image
plt.subplot(3, 3, 1)
plt.imshow(img, cmap='gray')
plt.title("Original Image")
plt.axis("off")

# Histogram of original image
plt.subplot(3, 3, 2)
plt.hist(img.ravel(), bins=256, range=(0, 256), color='blue', alpha=0.7)
plt.title("Original Histogram")
plt.xlabel("Pixel Intensity")
plt.ylabel("Frequency")

# Contrast-adjusted image
plt.subplot(3, 3, 3)
plt.imshow(contrast_img, cmap='gray')
plt.title(f"Contrast Adjusted (Î±={alpha}, Î²={beta})")
plt.axis("off")

# Histogram of contrast-adjusted image
plt.subplot(3, 3, 5)
plt.hist(contrast_img.ravel(), bins=256, range=(0, 256), color='red', alpha=0.7)
plt.title("Contrast-Adjusted Histogram")
plt.xlabel("Pixel Intensity")
plt.ylabel("Frequency")

# CLAHE-applied image
plt.subplot(3, 3, 4)
plt.imshow(clahe_img, cmap='gray')
plt.title("CLAHE Image")
plt.axis("off")

# Histogram of CLAHE image
plt.subplot(3, 3, 6)
plt.hist(clahe_img.ravel(), bins=256, range=(0, 256), color='green', alpha=0.7)
plt.title("CLAHE Histogram")
plt.xlabel("Pixel Intensity")
plt.ylabel("Frequency")

# Combined histogram comparison
plt.subplot(3, 3, 7)
plt.hist(img.ravel(), bins=256, range=(0, 256), color='blue', alpha=0.5, label='Original')
plt.hist(contrast_img.ravel(), bins=256, range=(0, 256), color='red', alpha=0.5, label='Contrast Adjusted')
plt.hist(clahe_img.ravel(), bins=256, range=(0, 256), color='green', alpha=0.5, label='CLAHE')
plt.title("Combined Histogram Comparison")
plt.xlabel("Pixel Intensity")
plt.ylabel("Frequency")
plt.legend()

# Adjust layout and show the plot
plt.tight_layout()
plt.show()